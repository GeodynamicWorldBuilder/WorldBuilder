name: tests

on: [push, pull_request]

jobs:
  test_indentation:
    runs-on: ubuntu-latest

    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.16.x'

      - name: Use cmake
        run: cmake --version
      
      - uses: actions/checkout@v2

      - name: Install astyle
        shell: bash
        run: cd .. && mkdir astyle && cd astyle && wget 'https://sourceforge.net/projects/astyle/files/astyle/astyle 2.04/astyle_2.04_linux.tar.gz' && tar -zxvf astyle_2.04_linux.tar.gz && cd astyle/build/gcc && make && sudo make install && cd ../../../../
      
      - name: Create Build Environment
        run: | 
              mkdir build;
              cd build;

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake ..

      - name: Indenting
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: make indent

      - name: Indenting
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: git status

      - name: check indentation
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: | 
              if [[ "$(git status | grep 'modified' --count)" -gt "0" ]]; then 
                 git diff > diff.log; 
                 cat diff.log; 
                 exit 1; 
              fi

  benchmarks:
    strategy: 
      fail-fast: false
    runs-on: ubuntu-latest

    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '3.16.x'

    - name: Use cmake
      run: cmake --version
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
          ${{github.workspace}}/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}


    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Install cbdr
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true'
      run: 'cargo install cbdr ||:'

    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: MFraters/cbdr
        ref: github_actions_fix
        path: cbdr


    - name: cd Build Environment
      run: |
            cd ${{github.workspace}}/cbdr/;
            cargo build;

    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: feature

    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: master
        path: master

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/master/build


    - name: cd Build Environment
      run: |
            cd ${{github.workspace}}/master/build;
            pwd;
            ls;

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/master/build
      run: |
            pwd;
            ls;
            cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-Werror ${{github.workspace}}/master/;

    - name: Build gwb
      working-directory: ${{github.workspace}}/master/build
      shell: bash
      run: cmake --build ${{github.workspace}}/master/build --config Release 



    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/feature/build

    - name: cd Build Environment
      run: cd ${{github.workspace}}/feature/build;

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/feature/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=-Werror ${{github.workspace}}/feature/

    - name: Build gwb
      working-directory: ${{github.workspace}}/feature/build
      shell: bash
      run: cmake --build ${{github.workspace}}/feature/build --config Release

    - name: run benchmark 1
      run: time cbdr sample --timeout=120s "master:${{github.workspace}}/master/build/bin/./WorldBuilderVisualization  ${{github.workspace}}/feature/tests/app/slab_interpolation_simple_none.wb ${{github.workspace}}/feature/tests/visualization/gridfile.grid" "feature:${{github.workspace}}/feature/build/bin/./WorldBuilderVisualization ${{github.workspace}}/feature/tests/app/slab_interpolation_simple_none.wb ${{github.workspace}}/feature/tests/visualization/gridfile.grid" > ${{github.workspace}}/result.csv
    
    - name: cat
      run: cat ${{github.workspace}}/result.csv

    - name: change dir
      run: cd ${{github.workspace}}/cbdr/

    - name: output benchmark results
      run: |
            cd ${{github.workspace}}/cbdr/;
            RUST_BACKTRACE=1 cat ${{github.workspace}}/result.csv | cargo run analyze --disable-dynamic-printing > ${{github.workspace}}/analyze.log ||:;
            analyze_contents_var=$(cat ${{github.workspace}}/analyze.log)

    - name: cat analyze
      id: output_result
      run: |
            cat ${{github.workspace}}/analyze.log;
            echo "::set-output name=header::$(cat ${{github.workspace}}/analyze.log | grep master | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | sed 's/ /\&nbsp;\&nbsp;/g')"
            echo "::set-output name=sys_time::$(cat ${{github.workspace}}/analyze.log | grep sys_time | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | sed 's/ /\&nbsp;\&nbsp;/g')"
            echo "::set-output name=user_time::$(cat ${{github.workspace}}/analyze.log | grep user_time | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | sed 's/ /\&nbsp;\&nbsp;/g')"
            echo "::set-output name=wall_time::$(cat ${{github.workspace}}/analyze.log | grep wall_time | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | sed 's/ /\&nbsp;\&nbsp;/g')"
            echo "::set-output name=samples::$(cat ${{github.workspace}}/analyze.log | grep samples | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | sed 's/ /\&nbsp;\&nbsp;/g')"

    - name: Find Comment
      uses: peter-evans/find-comment@v1
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'

    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
               ${{ steps.output_result.outputs.header }}
               ${{ steps.output_result.outputs.sys_time }}
               ${{ steps.output_result.outputs.user_time }}
               ${{ steps.output_result.outputs.wall_time }}
               ${{ steps.output_result.outputs.samples }}
        edit-mode: replace

  test_linux_and_macos:
    needs: test_indentation
    strategy: 
      fail-fast: false
      matrix: 
        os: ['ubuntu-latest','macos-latest']
        build_type: ['Release', 'Debug']
      
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name:  Install optional dependencies
      run:   |
         if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt install gfortran swig python3-setuptools
         elif [ "$RUNNER_OS" == "macOS" ]; then
            sudo brew install swig || true    
         else          
            echo "$RUNNER_OS not supported"
            exit 1
         fi
      shell: bash
      
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS=-Werror

    - name: Build gwb
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Install gwb Linux and macOS
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: sudo cmake --install . --config ${{ matrix.build_type }}

    - name: Test gwb
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ctest -VV -C ${{ matrix.build_type }}
      

  test_windows:
    needs: test_indentation
    strategy: 
      fail-fast: false
      matrix: 
        os: ['windows-latest']
        build_type: ['Release', 'Debug']
        build_system: ['MinGW Makefiles','Visual Studio 15 2017 Win64']
      
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    # python in combination with cmake seems to be broken on github actions windows
    # todo: fix it
    #- name:  Install optional dependencies
    #  run:  choco install swig -version=4.0.1 -y
    #  shell: bash

    - uses: ilammy/msvc-dev-cmd@v1
        
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build gwb
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Install gwb windows
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --install . --config ${{ matrix.build_type }}


    - name: Test gwb
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ctest -VV -C ${{ matrix.build_type }}
      

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name:  Install optional dependencies
        run: sudo apt install gfortran swig python3-setuptools
        shell: bash

      - name: extend path
        run: echo $PATH && export PATH=$PATH:/home/runner/.local/bin && echo $PATH && export PYTHONPATH=$PYTHONPATH:/home/runner/.local/bin
      
      - name: Install coveralls
        run: pip install --user cpp-coveralls 
        shell: bash
         
      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Coverage

      - name: Build gwb
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config Coverage


      - name: Install gwb
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: sudo cmake --install . --config Coverage

      - name: Test gwb
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: ctest -VV -C Coverage

      - name: Codecov
        run: bash <(curl -s https://codecov.io/bash);
        shell: bash
